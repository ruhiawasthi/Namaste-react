------- Igniting our App -------


Caching:- is the process of storing data in a temporary storage location to minimise the need for redundant requests. By utilising caching effectively, React apps can avoid unnecessary data fetching and rendering, leading to faster load times and improved responsiveness.


1)  What is `NPM`?
-> npm is the package manager for Node.js. 




2) - What is `Parcel/Webpack`? Why do we need it?
-> They are Bundlers which does a lot of this like Minify the file, clean code, compression of files and many more things.


Parcel Features:
HMR (Hot Module Replacement) - parcel keeps track of file changes via file watcher algorithm and renders the changes in the files
File watcher algorithm - made with C++
Minification
Cleaning our code
DEV and production Build
Super fast building algorithm
Image optimization
Caching while development
Compresses
Compatible with older version of browser
HTTPS in dev
Port Number
Consistent hashing algorithm
Zero Configuration
Automatic code splitting




Parcel Command 


for Installing parcel in dev dependency:
npm install -D parcel


Run parcel 
npx parcel entrypoint: npx parcel index.html


For production build :
npx parcel build index.html


3)- What is `.parcel-cache
-> it is generated by parcel for storing the cache and making HMR faster by using these caches.


4)- What is `npx` ?
-> NPX stands for Node Package eXecute




5)- What is Tree Shaking?
-> Tree shaking in JavaScript refers to a process of eliminating unused code during the bundling process.


6)- What is Hot Module Replacement?
-> Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload.


7) - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
-> Caching while development
   Minify the files
   Img optimization
   Clean code
   super fast build algorithm


8) - What is `.gitignore`? What should we add and not add into it?
->  Anything which is auto generated or we can generate on the server we don't have to put that files in .gitignore.


9) - What is the difference between `package.json` and `package-lock.json`
-> package.json : outlines your project requirements and desired dependencies.
   package-lock.json : It locks the exact version. Ensures you get the exact set of dependencies used during development, promoting consistent installations across environments.


10) - Why should I not modify `package-lock.json`?
->It locks the version it maintains the exact version, and keeps the track of the exact version. It maintains the hash of it in integrity.


11) - What is `node_modules` ? Is it a good idea to push that on git?
-> node_modules is like a database for your npm,whatever you install it gets installed in node module.dont push node modules in git because it is a heavy file.


12) - What is the `dist` folder?
-> Parcel builds all the production files in dist. minified the code into just 3 files. index.js, index.css, index.css.


13) - What is `browser lists`
-> It  makes your application Compatible in all browsers with the help of browser lists.


14)Read about dif bundlers: vite, webpack, parcel
-> For large-scale projects with complex requirements and a need for extensive customization, Webpack might be the best choice.
->For small to medium-sized projects that prioritize a fast development experience and simplicity, Parcel could be a great fit.
->For projects that value performance and want to leverage a modern development workflow, Vite is a promising option.




15) Read about: ^ - caret and ~ - tilda
-> Caret (^) - Patch and Minor Version Updates:
This symbol indicates that your project can accept all patch and minor version updates for the specified package.


Example: ^1.2.3 allows versions from 1.2.3 up to, but not including, 1.3.0. It also allows all patch releases within the 1.2.x range (e.g., 1.2.4, 1.2.5).
Use Case: This is a common choice when you want to benefit from bug fixes and minor improvements in newer versions while maintaining compatibility with your existing code. New features introduced in minor versions might require some code adjustments, so it's a good balance between stability and updates.


-> Tilde (~) - Patch Version Updates:


This symbol indicates that your project can accept all patch version updates for the specified package.
Example: ~1.2.3 allows versions from 1.2.3 up to, but not including, 1.2.4. It excludes any minor version updates (e.g., 1.3.0).
Use Case: This is suitable when you prioritize strict compatibility and want to avoid potential breaking changes that might be introduced in minor versions. You'll receive bug fixes but not new features or functionalities.


16) Read about Script types in html (MDN Docs)
-> type="text/javascript" (default): This is the most common type used for inline JavaScript within an HTML document. Browsers typically recognize this type by default if no type attribute is specified.


-> type="module": This is used for JavaScript modules. Modules allow you to organize your code into reusable units and manage dependencies between them.


-> type="text/babel": This is less common and specifies Babel, a JavaScript compiler, should be used to transpile the script before execution. This is typically used for modern JavaScript features that might not be supported by older browsers.


